// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int          @id @default(autoincrement())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  sessions      Session[]
  adventure     Adventure?   @relation(fields: [adId], references: [id])
  adId          Int?
  setting       Setting?
  posts         Post[]
  suggestions   Suggestion[]
}

model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  providerType       String
  providerId         String
  providerAccountId  Int
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Character {
  id            Int       @id @default(autoincrement())
  name          String
  server        String
  adventureName String
  adventure     Adventure @relation(fields: [adventureName], references: [name])
  // guildName     String?
  // guild         Guild?     @relation(fields: [guildName], references: [name])
  damage        BigInt?
  images        Image[]
  like          Int       @default(0)
  hate          Int       @default(0)
}

model Adventure {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  characters Character[]
  user       User[]
}

model Image {
  id          Int       @id @default(autoincrement())
  data        Int
  character   Character @relation(fields: [characterId], references: [id])
  characterId Int
  date        DateTime  @default(now())
}

// model Guild {
//   id     Int         @id @default(autoincrement())
//   name   String      @unique
//   master Character
//   stars  Character[]
//   high   Character[]
//   low    Character[]
// }

model Setting {
  id       Int     @id @default(autoincrement())
  user     User    @relation(fields: [userId], references: [id])
  userId   Int     @unique
  darkmode Boolean @default(false)
}

model Post {
  id         Int       @id @default(autoincrement())
  type       String
  title      String
  html       String
  markdown   String
  author     User      @relation(fields: [authorId], references: [id])
  authorId   Int
  postDate   DateTime  @default(now()) @map(name: "post_date")
  reviseDate DateTime? @map(name: "revise_date")
}

model Suggestion {
  id       Int      @id @default(autoincrement())
  content  String
  author   User?    @relation(fields: [authorId], references: [id])
  authorId Int
  date     DateTime @default(now())
}
